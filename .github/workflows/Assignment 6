{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "78eaf0d0-8e6a-469f-ba4c-c537f3d90511",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              White     Black  Asian-Pac-Islander     Other\n",
      "Accuracy   0.801329  0.891758            0.749153  0.939759\n",
      "Precision  0.702439  0.517647            0.647059  0.857143\n",
      "Recall     0.397790  0.392857            0.370787  0.600000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "\n",
    "# Load csv\n",
    "predictions = pd.read_csv('adult_models_only.csv')\n",
    "data = pd.read_csv('adult_reconstruction_bin.csv')\n",
    "\n",
    "# Choose LR model for analyzing specifically income >= 50k\n",
    "model_predictions = predictions['LR_income>=50k']\n",
    "\n",
    "# Merge predictions with the original data \n",
    "data_merge = pd.merge(data, predictions, on=None)  \n",
    "\n",
    "# Define groups (here we are doing race)\n",
    "groups = ['White', 'Black', 'Asian-Pac-Islander', 'Other']\n",
    "\n",
    "# Function to compute metrics for each group\n",
    "def compute(group):\n",
    "    group_data = data_merge[data_merge['race'] == group]  \n",
    "    labels_true = group_data['income>=50k']  \n",
    "    labels_predicted = group_data['LR_income>=50k']\n",
    "    \n",
    "    accuracy = accuracy_score(labels_true, labels_predicted)\n",
    "    precision = precision_score(labels_true, labels_predicted)\n",
    "    recall = recall_score(labels_true, labels_predicted)\n",
    "    \n",
    "    return accuracy, precision, recall\n",
    "\n",
    "# Calculate metrics for the 4 groups\n",
    "metrics = {}\n",
    "for group in groups:\n",
    "    metrics[group] = compute(group)\n",
    "\n",
    "# Create table for metrics\n",
    "table_metrics = pd.DataFrame(metrics, index=['Accuracy', 'Precision', 'Recall'])\n",
    "\n",
    "print(table_metrics)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ca20b21-1dda-4734-9b38-80c3af596241",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Accuracy: Correctly predicted instances based out of all instances. 0 being the lowest and 1 being the highest\n",
    "# Precision: Correcrtly predicted positive observations based out of all of the predicted positive observations. 0 being more false positives and poor quality to 1\n",
    "# Recall: Correcrtly predicted positive observations based out of all of the actual positive observations. 0 being more false negatives and poor quality to 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8bff27ed-2864-4ad2-978e-a34f0d29741f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Unnamed: 0', 'LR_income>=10k', 'LR_income>=20k', 'LR_income>=30k',\n",
      "       'LR_income>=40k', 'LR_income>=50k', 'LR_income>=60k', 'LR_income>=70k',\n",
      "       'LR_income>=80k', 'LR_income>=90k', 'GPR_income>=10k',\n",
      "       'GPR_income>=20k', 'GPR_income>=30k', 'GPR_income>=40k',\n",
      "       'GPR_income>=50k', 'GPR_income>=60k', 'GPR_income>=70k',\n",
      "       'GPR_income>=80k', 'GPR_income>=90k', 'RPR_income>=10k',\n",
      "       'RPR_income>=20k', 'RPR_income>=30k', 'RPR_income>=40k',\n",
      "       'RPR_income>=50k', 'RPR_income>=60k', 'RPR_income>=70k',\n",
      "       'RPR_income>=80k', 'RPR_income>=90k'],\n",
      "      dtype='object')\n",
      "   Unnamed: 0  LR_income>=10k  LR_income>=20k  LR_income>=30k  LR_income>=40k  \\\n",
      "0           1             1.0             1.0             1.0             0.0   \n",
      "1           4             1.0             0.0             0.0             0.0   \n",
      "2           9             1.0             1.0             0.0             0.0   \n",
      "3          14             1.0             1.0             1.0             0.0   \n",
      "4          25             1.0             1.0             0.0             0.0   \n",
      "\n",
      "   LR_income>=50k  LR_income>=60k  LR_income>=70k  LR_income>=80k  \\\n",
      "0             0.0             0.0             0.0             0.0   \n",
      "1             0.0             0.0             0.0             0.0   \n",
      "2             0.0             0.0             0.0             0.0   \n",
      "3             0.0             0.0             0.0             0.0   \n",
      "4             0.0             0.0             0.0             0.0   \n",
      "\n",
      "   LR_income>=90k  ...  GPR_income>=90k  RPR_income>=10k  RPR_income>=20k  \\\n",
      "0             0.0  ...              0.0              1.0              1.0   \n",
      "1             0.0  ...              0.0              1.0              0.0   \n",
      "2             0.0  ...              0.0              1.0              1.0   \n",
      "3             0.0  ...              0.0              1.0              1.0   \n",
      "4             0.0  ...              0.0              1.0              1.0   \n",
      "\n",
      "   RPR_income>=30k  RPR_income>=40k  RPR_income>=50k  RPR_income>=60k  \\\n",
      "0              1.0              0.0              0.0              0.0   \n",
      "1              0.0              0.0              0.0              0.0   \n",
      "2              0.0              0.0              0.0              0.0   \n",
      "3              1.0              0.0              0.0              0.0   \n",
      "4              0.0              0.0              0.0              0.0   \n",
      "\n",
      "   RPR_income>=70k  RPR_income>=80k  RPR_income>=90k  \n",
      "0              0.0              0.0              0.0  \n",
      "1              0.0              0.0              0.0  \n",
      "2              0.0              0.0              0.0  \n",
      "3              0.0              0.0              0.0  \n",
      "4              0.0              0.0              0.0  \n",
      "\n",
      "[5 rows x 28 columns]\n",
      "Index(['Unnamed: 0', 'hours-per-week', 'age', 'capital-gain', 'capital-loss',\n",
      "       'workclass', 'education', 'education-num', 'marital-status',\n",
      "       'relationship', 'race', 'gender', 'native-country', 'occupation',\n",
      "       'income>=10k', 'income>=20k', 'income>=30k', 'income>=40k',\n",
      "       'income>=50k', 'income>=60k', 'income>=70k', 'income>=80k',\n",
      "       'income>=90k'],\n",
      "      dtype='object')\n",
      "   Unnamed: 0  hours-per-week  age  capital-gain  capital-loss workclass  \\\n",
      "0           0              20   40             0             0   Private   \n",
      "1           1              40   21             0             0   Private   \n",
      "2           2              10   17             0             0   Private   \n",
      "3           3              50   51             0             0   Private   \n",
      "4           4              38   28             0             0   Private   \n",
      "\n",
      "      education  education-num      marital-status   relationship  ...  \\\n",
      "0     Bachelors             13  Married-civ-spouse           Wife  ...   \n",
      "1  Some-college             10            Divorced      Own-child  ...   \n",
      "2          11th              7       Never-married      Own-child  ...   \n",
      "3       HS-grad              9  Married-civ-spouse        Husband  ...   \n",
      "4     Bachelors             13       Never-married  Not-in-family  ...   \n",
      "\n",
      "        occupation income>=10k income>=20k income>=30k  income>=40k  \\\n",
      "0     Tech-support         1.0         1.0         1.0          1.0   \n",
      "1     Craft-repair         1.0         0.0         0.0          0.0   \n",
      "2    Other-service         0.0         0.0         0.0          0.0   \n",
      "3            Sales         1.0         1.0         1.0          0.0   \n",
      "4  Exec-managerial         1.0         1.0         1.0          1.0   \n",
      "\n",
      "   income>=50k  income>=60k  income>=70k  income>=80k  income>=90k  \n",
      "0          0.0          0.0          0.0          0.0          0.0  \n",
      "1          0.0          0.0          0.0          0.0          0.0  \n",
      "2          0.0          0.0          0.0          0.0          0.0  \n",
      "3          0.0          0.0          0.0          0.0          0.0  \n",
      "4          0.0          0.0          0.0          0.0          0.0  \n",
      "\n",
      "[5 rows x 23 columns]\n"
     ]
    }
   ],
   "source": [
    "# Columns in predictions dataset\n",
    "print(predictions.columns) \n",
    "# Displaying the first few rows\n",
    "print(predictions.head())  \n",
    "\n",
    "# Columns in data dataset\n",
    "print(data.columns)\n",
    "# Displaying first few rows in data dataset\n",
    "print(data.head())  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
